org 07c00h ; 告诉编译器程序加载到7c00处

mov ax, cs

mov ds, ax

mov es, ax

call DispStr ; 调用显示字符串例程

jmp $ ; 无限循环

DispStr:

mov ax, BootMessage

mov bp, ax ; es:bp = 串地址

mov cx, 16 ; cx = 串长度

mov ax, 01301h ; ah = 13, al = 01h

mov bx, 000ch ; 页号为0(bh = 0) 黑底红字(bl = 0Ch,高亮)

mov dl, 0

int 10h ; 10h 号中断

ret

BootMessage: db "Hello, OS world!"

times 510-($-$$) db 0 ; 填充剩下的空间，使生成的二进制代码恰好为

; 512字节

dw 0xaa55 ; 



死循环是因为代码只有这么点，执行完以后不可能让cpu去取这块内存之外的内容来执行吧，因为你也不知道那些内存里包含什么指令，执行之后会造成什么结果！

过程就是调用BIOS 10号中断在屏幕上输出一句话“Hello...”，程序一开始那几句mov的作用就是初始化使用这个中断所需要提供的各种信息，比如字符串地址，输出页码，字符串长度，颜色等等，这些中断使用的方法和参数可以在bios手册上查到

times是个nasm的伪指令，相当于masm的dup，重复赋值
times nnn db mmm的作用就是在接下来的内存单元里存储nnn份值为mmm的字节
$是当前的汇编地址，$$是段地址，$-$$的结果便是times这个点距离该段代码开始后的字节数，也即是前面从mov ax, cx到最后BootMessage:之后的这段代码的长度，用510来减去这个长度，剩下的字节空间全部填充为0，最后剩下2个字节dw 0xaa55，用来设置bootsector标记，这样这512字节的内容就可以被bios识别并加载执行了。